{
	"info": {
		"_postman_id": "4cf10f9e-0ac2-4b77-8ed3-ee7592d69acb",
		"name": "OTUS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2240706"
	},
	"item": [
		{
			"name": "4. Helm",
			"item": [
				{
					"name": "Получить всех пользователей",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "arch.homework",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/api/v1/user",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создать пользователя пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody != null && responseBody != undefined) {\r",
									"    var data = JSON.parse(responseBody);\r",
									"    var id = data.id;\r",
									"    pm.collectionVariables.set(\"user-id\", id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "arch.homework",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"secondName\": \"{{$randomFirstName}}\",\r\n    \"email\": \"{{$randomLastName}}@mail.ru\",\r\n    \"restaurantId\": \"235ad3a0-49d4-4852-99b0-9ab1ec6174f3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/api/v1/user",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователя по id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "arch.homework",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"Иванов\",\r\n    \"firstName\": \"Иван\",\r\n    \"secondName\": \"Иванович\",\r\n    \"email\": \"ivanov@mail.ru\",\r\n    \"restaurantId\": \"235ad3a0-49d4-4852-99b0-9ab1ec6174f3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/api/v1/user/{{user-id}}",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить данные пользователя",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Host",
								"value": "arch.homework",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"Петров\",\r\n    \"firstName\": \"Петр\",\r\n    \"secondName\": \"Петрович\",\r\n    \"email\": \"petrov@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/api/v1/user/{{user-id}}",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить пользователя",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "arch.homework",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/api/v1/user/{{user-id}}",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Базовые сущности Kubernetes",
			"item": [
				{
					"name": "Базовые сущности Кubernetes: ReplicaSet, Deployment, Service, Ingress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status health is UP\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.status).to.eql(\"UP\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "arch.homework",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://arch.homework/actuator/health",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "19. Backend for frontends",
			"item": [
				{
					"name": "Зарегистрировать пользователя 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody != null && responseBody != undefined) {\r",
									"    var data = JSON.parse(responseBody);\r",
									"    var id = data.id;\r",
									"    pm.collectionVariables.set(\"user-id\", id);\r",
									"}\r",
									"\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"if (requestBody != null && requestBody != undefined) {\r",
									"    pm.collectionVariables.set(\"user-login\", requestBody.email);\r",
									"    pm.collectionVariables.set(\"user-password\", requestBody.password);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"secondName\": \"{{$randomFirstName}}\",\r\n    \"email\": \"{{$randomLastName}}@mail.ru\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"restaurantId\": \"235ad3a0-49d4-4852-99b0-9ab1ec6174f3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка изменить профиль без логина",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"   pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"secondName\": \"{{$randomFirstName}}\",\r\n    \"email\": \"{{$randomLastName}}@mail.ru\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"restaurantId\": \"235ad3a0-49d4-4852-99b0-9ab1ec6174f3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/{{user-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Залогиниться под пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody != null && responseBody != undefined) {\r",
									"    var data = JSON.parse(responseBody);\r",
									"    var token = data.token;\r",
									"    pm.collectionVariables.set(\"token\", token);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"{{user-login}}\",\r\n    \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login/pwd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login",
								"pwd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменить профиль под авторизованным пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"pm.test(\"Second name is changed\", function() {\r",
									"    pm.expect(responseJson.secondName).to.eql(requestBody.secondName);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"secondName\": \"{{$randomFirstName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/{{user-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить данные пользователя 1 под пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/{{user-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Зарегистрировать пользователя 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody != null && responseBody != undefined) {\r",
									"    var data = JSON.parse(responseBody);\r",
									"    var id = data.id;\r",
									"    pm.collectionVariables.set(\"user-id-2\", id);\r",
									"}\r",
									"\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"if (requestBody != null && requestBody != undefined) {\r",
									"    pm.collectionVariables.set(\"user-login-2\", requestBody.email);\r",
									"    pm.collectionVariables.set(\"user-password-2\", requestBody.password);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"secondName\": \"{{$randomFirstName}}\",\r\n    \"email\": \"{{$randomLastName}}@mail.ru\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"restaurantId\": \"235ad3a0-49d4-4852-99b0-9ab1ec6174f3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Залогиниться под пользователем 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody != null && responseBody != undefined) {\r",
									"    var data = JSON.parse(responseBody);\r",
									"    var token = data.token;\r",
									"    pm.collectionVariables.set(\"token-2\", token);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"{{user-login-2}}\",\r\n    \"password\": \"{{user-password-2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login/pwd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login",
								"pwd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить данные пользователя 1 под пользователем 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function() {\r",
									"   pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/{{user-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменить данные пользователя 1 под пользователем 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function() {\r",
									"   pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"secondName\": \"{{$randomFirstName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/{{user-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework",
			"type": "string"
		},
		{
			"key": "user-id",
			"value": ""
		},
		{
			"key": "user-login",
			"value": ""
		},
		{
			"key": "user-password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "user-secondname-new",
			"value": ""
		},
		{
			"key": "user-id-2",
			"value": ""
		},
		{
			"key": "user-login-2",
			"value": ""
		},
		{
			"key": "user-password-2",
			"value": ""
		},
		{
			"key": "token-2",
			"value": ""
		}
	]
}