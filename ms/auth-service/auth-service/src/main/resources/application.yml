server:
  port: 8081

spring:
  application:
    name: auth-service
  datasource:
    url: ${db.url}
    username: ${db.username}
    password: ${db.password}
  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  flyway:
    url: ${db.url}
    user: ${db.username}
    password: ${db.password}
    locations:
      - classpath:db
    schemas:
      - auth

db:
  url:
  username:
  password:

jwt:
  secret: FBB218A641D039B8AC94C165B32F883A13390DE0EA330D8566A67D108FA3BD51E6ED44957C8F7C645D61CE431E2AF23793DDB225129DE65960A896DCC3D89DDF
  expirationInMs: 600000
  refreshSecret: FBB218A641D039B8AC94C165B32F883A13390DE0EA330D8566A67D108FA3BD51E6ED44957C8F7C645D61CE431E2AF23793DDB225129DE65960A896DCC3D89DDF
  refreshExpirationInMs: -1

management:
  endpoints:
    web:
      exposure:
        include: prometheus, health, metrics
  metrics:
    enable:
      timed: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true


logging:
  level:
    org.springframework.security: DEBUG